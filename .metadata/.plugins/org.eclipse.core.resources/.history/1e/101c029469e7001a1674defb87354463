package springBootTest2.service.main;

import java.util.List;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;

import springBootTest2.command.AuthInfo;
import springBootTest2.command.LoginCommand;
import springBootTest2.domain.MemberDTO;
import springBootTest2.mapper.MemberMapper;

@Component
@Service
public class LoginService {
	@Autowired
	MemberMapper memberMapper;
	@Autowired
	PasswordEncoder passwordEncoder;
	AuthInfo authInfo;
	public String execute(LoginCommand loginCommand, HttpSession session, Model model, HttpServletResponse response) {
		String path = "";
		System.out.println("LoginService");
		MemberDTO memberDTO = new MemberDTO(); 
		memberDTO.setUserId(loginCommand.getUserId());
		List<MemberDTO> list = memberMapper.selectByMember(memberDTO);
		System.out.println(list);
		if (list.size() == 0) {
			System.out.println("아이디가 없습니다.");
			model.addAttribute("valid_user", "아이디가 존재하지 않습니다.");
		} else {
			memberDTO = list.get(0);
			if (passwordEncoder.matches(loginCommand.getUserPw(), memberDTO.getUserPw())) {
				System.out.println("로그인 성공.");
				authInfo = new AuthInfo(
						memberDTO.getUserId(), 
						memberDTO.getUserEmail(), 
						memberDTO.getUserName(), 
						memberDTO.getUserPw()
					);
				session.setAttribute("authInfo", authInfo);
				
				Boolean idStore = loginCommand.getIdStore();
				if (idStore != null && idStore == true) {
					Cookie cookie = new Cookie("idStore", idStore);
				}
				
				path = "redirect:/";
			} else {
				System.out.println("비밀번호가 틀렸습니다.");
				model.addAttribute("valid_pw", "비밀번호가 틀렸습니다.");
				path = "thymeleaf/index";
			}
		}
		
		return path;
	}
	
}
