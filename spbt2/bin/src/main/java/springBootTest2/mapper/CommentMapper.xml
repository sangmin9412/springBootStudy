<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="springBootTest2.mapper.CommentMapper">
	<sql id="baseColumn"><!-- comment 테이블 기본 컬럼 -->
		COMMENT_NO,
		CUSER_ID,
		COMMENT_SUBJECT,
		COMMENT_CONTENT,
		REG_DATE
	</sql>
	<sql id="baseCommentColumn"><!-- comment 테이블 기본 컬럼 REG_DATA > CREG_DATE -->
		COMMENT_NO,
		CUSER_ID,
		COMMENT_SUBJECT,
		COMMENT_CONTENT,
		REG_DATE as CREG_DATE
	</sql>
	<sql id="baseMemberColumn"><!-- member 테이블 컬럼 -->
		USER_ID,
		USER_PW,
		USER_NAME,
		USER_BIRTH,
		USER_GENDER,
		USER_EMAIL,
		USER_ADDR,
		USER_PH1,
		USER_PH2,
		USER_REGIST
	</sql>
	<insert id="insertComment">
		insert into comment1(<include refid="baseColumn" />)
		values(
			num_seq.nextval,
			#{cuserId},
			#{commentSubject},
			#{commentContent},
			sysdate
		)
	</insert>
	
	<select id="getCommentList" parameterType="springBootTest2.domain.CommentDTO" resultMap="CommentResultMap2">
		select *
		from (
			select 	rownum rn,
					<include refid="baseColumn" />
			from (
					select 	<include refid="baseColumn" />
					from comment1
					<where>
						<if test="commentNo != null">
							comment_no = #{commentNo}
						</if>
					</where>
					order by REG_DATE desc
			)
		)
		<where>
			<if test="startEndPageDTO != null">
				rn between #{startEndPageDTO.startPage} 
				and #{startEndPageDTO.endPage}
			</if>
		</where>
	</select>
	
	<select id="getCommentCount" resultType="int">
		select count(*) 
		from comment1
	</select>
	
	<insert id="replyInsert" parameterType="springBootTest2.domain.ReplyDTO">
		insert into reply(
			REPLY_NO,
			RUSER_ID,
			COMMENT_NO,
			CUSER_ID,
			REPLY_CONTENT,
			REG_DATE
		)
		values(
			num_seq.nextval,
			#{ruserId},
			#{commentNo},
			#{cuserId},
			#{replyContent},
			sysdate
		)
	</insert>
	
	<select id="getCommentReplies" parameterType="springBootTest2.domain.CommentDTO" resultMap="CommantRepliesMap"><!-- 댓글 방법 1번째 -->
		select 
			c.comment_no, c.cuser_id, comment_subject, comment_content,
			c.reg_date as creg_date,
			reply_no, ruser_id, reply_content, r.reg_date as rreg_date
		from comment1 c left outer join reply r
		on c.comment_no = r.comment_no
		where c.comment_no = #{commentNo}
	</select>
	
	<resultMap type="springBootTest2.domain.CommentDTO" id="CommantRepliesMap"> <!-- 댓글 방법 1번째 --> <!-- CommentDTO + ReplyDTO 1 대 다수 -->
		<id column="comment_no" jdbcType="BIGINT" property="commentNo" />
		<id column="cuser_id" jdbcType="VARCHAR" property="cuserId" />
		<result column="creg_date" jdbcType="TIMESTAMP" property="regDate" />
		<result column="comment_subject" jdbcType="VARCHAR" property="commentSubject" />
		<result column="comment_content" jdbcType="VARCHAR" property="commentContent" />
		<collection 
			property="replies" 
			ofType="springBootTest2.domain.ReplyDTO" 
			resultMap="replyBaseMap" />
	</resultMap>
	
	<resultMap type="springBootTest2.domain.ReplyDTO" id="replyBaseMap">
		<id column="comment_no" jdbcType="BIGINT" property="commentNo" />
		<id column="cuser_id" jdbcType="VARCHAR" property="cuserId" />
		<id column="reply_no" jdbcType="BIGINT" property="replyNo" />
		<id column="ruser_id" jdbcType="VARCHAR" property="ruserId" />
		<result column="reply_content" jdbcType="VARCHAR" property="replyContent" />
		<result column="rreg_date" jdbcType="TIMESTAMP" property="regDate" />
	</resultMap>
	
	<resultMap type="springBootTest2.domain.CommentDTO" id="CommentResultMap2">
		<id column="comment_no" jdbcType="BIGINT" property="commentNo" />
		<id column="cuser_id" jdbcType="VARCHAR" property="cuserId" />
		<result column="reg_date" jdbcType="TIMESTAMP" property="regDate" />
		<result column="comment_subject" jdbcType="VARCHAR" property="commentSubject" />
		<result column="comment_content" jdbcType="VARCHAR" property="commentContent" />
	</resultMap>
	
	<resultMap type="springBootTest2.domain.CommentDTO" id="CommentResultMap"><!-- REG_DATA > CREG_DATE -->
		<id column="comment_no" jdbcType="BIGINT" property="commentNo" />
		<id column="cuser_id" jdbcType="VARCHAR" property="cuserId" />
		<result column="creg_date" jdbcType="TIMESTAMP" property="regDate" />
		<result column="comment_subject" jdbcType="VARCHAR" property="commentSubject" />
		<result column="comment_content" jdbcType="VARCHAR" property="commentContent" />
	</resultMap>
	
	<select id="commentRepliesCollection" parameterType="long" resultMap="collectionResultMap"><!-- 댓글 방법 2번째 -->
		select 
			c.comment_no, c.cuser_id, comment_subject, comment_content,
			c.reg_date as creg_date,
			reply_no, ruser_id, reply_content, r.reg_date as rreg_date
		from comment1 c left outer join reply r
		on c.comment_no = r.comment_no
		where c.comment_no = #{commentNo}
	</select>
	
	<resultMap type="springBootTest2.domain.CommentRepliesDTO" id="collectionResultMap"> <!-- 댓글 방법 2번째 --> <!-- CommentDTO + ReplyDTO 1 대 다수 -->
		<association 
			property="commentDTO"
			javaType="springBootTest2.domain.CommentDTO"
			resultMap="CommentResultMap" 
		/>
		<collection 
			property="replies"
			ofType="springBootTest2.domain.ReplyDTO"
			resultMap="replyBaseMap" 
		/>
	</resultMap>
	
	<select id="getCommentUserList" parameterType="long" resultMap="commentUser">
		select *
		from (
			select 	rownum rn,
					<include refid="baseColumn" />,
					<include refid="baseMemberColumn" />
			from (
					select 	<include refid="baseColumn" />,
							<include refid="baseMemberColumn" />
					from member m, comment1 c
					<trim prefix="where" prefixOverrides="AND | OR">
						m.user_Id = c.cuser_id
						<if test="value != null">
							and comment_no = #{commentNo}
						</if>
					</trim>
					order by REG_DATE desc
			)
		)
		<!-- 
		<where>
			<if test="startEndPageDTO != null">
				rn between #{startEndPageDTO.startPage} 
				and #{startEndPageDTO.endPage}
			</if>
		</where>
		 -->
	</select>
	
	<select id="getCommentUser" parameterType="long" resultMap="associationResultMap">
		select 	<include refid="baseMemberColumn" />,
				<include refid="baseColumn" />
		from member m, comment1 c
		<trim prefix="where" prefixOverrides="AND | OR">
			m.user_Id = c.cuser_id
			<if test="value != null">
				and comment_no = #{commentNo}
			</if>
		</trim>
	</select>
	
	<resultMap type="springBootTest2.domain.MemberDTO" id="MemberResultMap"><!-- 작성자 정보를 가져오기 위한 resultMap -->
		<id column="user_id" jdbcType="VARCHAR" property="userId" />
		<result column="user_pw" jdbcType="VARCHAR" property="userPw" />
		<result column="user_name" jdbcType="VARCHAR" property="userName" />
		<result column="user_birth" jdbcType="TIMESTAMP" property="userBirth" />
		<result column="user_gender" jdbcType="VARCHAR" property="userGender" />
		<result column="user_addr" jdbcType="VARCHAR" property="userAddr" />
		<result column="user_ph1" jdbcType="VARCHAR" property="userPh1" />
		<result column="user_ph2" jdbcType="VARCHAR" property="userPh2" />
		<result column="user_email" jdbcType="VARCHAR" property="userEmail" />
		<result column="user_regist" jdbcType="TIMESTAMP" property="userRegist" />
	</resultMap>
	
	<resultMap type="springBootTest2.domain.CommentUserDTO" id="commentUser">
		<association property="commentDTO" resultMap="CommentResultMap2" />
		<association property="memberDTO" resultMap="MemberResultMap" />
	</resultMap>
	
	<resultMap type="springBootTest2.domain.CommentDTO" id="associationResultMap">
		<id column="comment_no" jdbcType="BIGINT" property="commentNo" />
		<id column="cuser_id" jdbcType="VARCHAR" property="cuserId" />
		<result column="reg_date" jdbcType="TIMESTAMP" property="regDate" />
		<result column="comment_subject" jdbcType="VARCHAR" property="commentSubject" />
		<result column="comment_content" jdbcType="VARCHAR" property="commentContent" />
		<association property="memberDTO" javaType="springBootTest2.domain.MemberDTO" resultMap="MemberResultMap" />
	</resultMap>
	
</mapper>